#!/usr/bin/env python

# (c) 2014, Chase Colman <chase@colman.io>
#
# This file is part of ansible-yaml-snippet-generator
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# ansible-vim-snippet-generator is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import argparse
from ansible_snippet_gen import __version__
import ansible_docs
from itertools import count as counter
from jinja2 import Environment, PackageLoader

def main():
    p = argparse.ArgumentParser(
        version="%(prog)s "+__version__,
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description="""Generate Ansible module snippets for Vim SnipMate/UltiSnips

UltiSnips snippets are written to 'UltiSnips/ansible.snippets'
SnipMate snippets are written to 'snippets/ansible.snippets'

Defaults to generating both snippet formats."""
    )
    p.add_argument("-w", "--wrap-after",
            action="store",
            dest="wrap_after",
            default=4,
            type=int,
            help="wrap module options after # options, default #=4")
    p.add_argument("-f",
            action="store",
            choices=["U","S","B","u","s","b"],
            default="B",
            dest="format",
            help="output choices: (U)ltiSnips, (S)nipMate, or (B)oth")
    p.add_argument("--verbose",
            action="store_true",
            dest="verbose",
            help="show warnings")
    p.add_argument("-M", "--module-path",
            action="store",
            dest="module_path",
            default=ansible_docs.MODULEDIR,
            help="add a Ansible modules directory")

    options = p.parse_args()

    write_format = options.format.lower()
    in_ultisnips = write_format in ['u','b']
    in_snipmate = write_format in ['s','b']

    # Create Jinja2 Environment
    env = Environment(loader=PackageLoader('ansible_snippet_gen','templates'))
    env.trim_blocks = True
    env.lstrip_blocks = True

    # Grab all the documents as a key-value generator
    docs = ansible_docs.get_docs(options.module_path, options.verbose)

    if in_ultisnips:
        if not os.path.exists('UltiSnips'):
            os.mkdir('UltiSnips')
        ultisnips = open('UltiSnips/ansible.snippets', 'w')
        ultisnips_template = env.get_template('ultisnips.j2')
        # Add the UltiSnips priority header
        ultisnips.write("priority -50\n\n")

    if in_snipmate:
        if not os.path.exists('snippets'):
            os.mkdir('snippets')
        snipmate = open('snippets/ansible.snippets', 'w')
        snipmate_template = env.get_template('snipmate.j2')

    wrap_after = options.wrap_after
    verbose = options.verbose
    for module, doc in docs:
        if verbose:
            print("Processing: %s"%module)
        if 'options' not in doc or len(doc['options'])==0:
            if verbose:
                print("WARNING: %s has no options, skipping"%module)
            continue
        content = { 'module': module,
                'arguments': doc['options'],
                'short': len(doc['options']) <= wrap_after,
                'stop': counter(1) }
        if in_ultisnips:
            ultisnips.write(ultisnips_template.render(**content))
        if in_snipmate:
            snipmate.write(snipmate_template.render(**content))

    if in_ultisnips:
         ultisnips.close()
    if in_snipmate:
         snipmate.close()


if __name__ == '__main__':
    main()
